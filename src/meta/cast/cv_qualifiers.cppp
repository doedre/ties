export module ties.meta.cast:cv_qualifiers;

namespace ties::meta::cast::impl {
  template<typename T>
  struct remove_const {
    using type = T;
  };

  template<typename T>
  struct remove_const<const T> {
    using type = T;
  };

  template<typename T>
  struct remove_volatile {
    using type = T;
  };

  template<typename T>
  struct remove_volatile<volatile T> {
    using type = T;
  };

  template<typename T>
  struct remove_cv_qualifiers {
    using type = T;
  };

  template<typename T>
  struct remove_cv_qualifiers<const T> {
    using type = T;
  };

  template<typename T>
  struct remove_cv_qualifiers<volatile T> {
    using type = T;
  };

  template<typename T>
  struct remove_cv_qualifiers<const volatile T> {
    using type = T;
  };

  template<typename T>
  struct add_const_qualifier {
    using type = const T;
  };

  template<typename T>
  struct add_volatile_qualifier {
    using type = volatile T;
  };

  template<typename T>
  struct add_const_volatile_qualifier {
    using type = const volatile T;
  };
}

export namespace ties::meta::cast {
  template<typename T>
  using remove_cv_qualifiers = typename impl::remove_cv_qualifiers<T>::type;

  template<typename T>
  using remove_const = typename impl::remove_const<T>::type;

  template<typename T>
  using remove_volatile = typename impl::remove_volatile<T>::type;

  template<typename T>
  using add_const_qualifier = typename impl::add_const_qualifier<T>::type;

  template<typename T>
  using add_volatile_qualifier = typename impl::add_volatile_qualifier<T>::type;

  template<typename T>
  using add_const_volatile_qualifier =
      typename impl::add_const_volatile_qualifier<T>::type;
}

