export module ties.meta.cast:references;

import ties.meta.types;

namespace ties::meta::cast::impl {
  template<typename T>
  struct remove_reference {
    using type = T;
  };

  template<typename T>
  struct remove_reference<T&> {
    using type = T;
  };

  template<typename T>
  struct remove_reference<T&&> {
    using type = T;
  };

  template<typename T, typename = void>
  struct add_lvalue_reference {
    using type = T;
  };

  template<typename T>
  struct add_lvalue_reference<T, types::void_t<T&>> {
    using type = T&;
  };

  template<typename T, typename = void>
  struct add_rvalue_reference {
    using type = T;
  };

  template<typename T>
  struct add_rvalue_reference<T, types::void_t<T&&>> {
    using type = T&&;
  };
}

export namespace ties::meta::cast {
  template<typename T>
  using remove_reference = typename impl::remove_reference<T>::type;

  template<typename T>
  using add_lvalue_reference = typename impl::add_lvalue_reference<T>::type;

  template<typename T>
  using add_rvalue_reference = typename impl::add_rvalue_reference<T>::type;
}

