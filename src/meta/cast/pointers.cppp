export module ties.meta.cast:pointers;

import ties.meta.types;

namespace ties::meta::cast::impl {
  template<typename T>
  struct remove_pointer {
    using type = T;
  };

  template<typename T>
  struct remove_pointer<T*> {
    using type = T;
  };

  template<typename T>
  struct remove_pointer<const T*> {
    using type = T;
  };

  template<typename T>
  struct remove_pointer<volatile T*> {
    using type = T;
  };

  template<typename T>
  struct remove_pointer<const volatile T*> {
    using type = T;
  };

  template<typename T, typename = void>
  struct add_pointer {
    using type = T;
  };

  template<typename T>
  struct add_pointer<T, types::void_t<T*>> {
    using type = T*;
  };

  template<typename T>
  struct add_pointer<T&> {
    using type = T*;
  };

  template<typename T>
  struct add_pointer<T&&> {
    using type = T*;
  };
}

export namespace ties::meta::cast {
  template<typename T>
  using remove_pointer = typename impl::remove_pointer<T>::type;

  template<typename T>
  using add_pointer = typename impl::add_pointer<T>::type;
}

