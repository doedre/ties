module;

#include <math.h>

export module ties.libc:math;

namespace ties::libc::impl {
  static constexpr double __HUGE_VAL = HUGE_VAL;
  static constexpr float __HUGE_VALF = HUGE_VALF;
  static constexpr long double __HUGE_VALL = HUGE_VALL;

  static constexpr float __INFINITY = INFINITY;
  
  static constexpr float __NAN = NAN;

  static constexpr int __FP_INFINITE = FP_INFINITE;
  static constexpr int __FP_NAN = FP_NAN;
  static constexpr int __FP_NORMAL = FP_NORMAL;
  static constexpr int __FP_SUBNORMAL = FP_SUBNORMAL;
  static constexpr int __FP_ZERO = FP_ZERO;

  /*
  // May be undefined
  static constexpr int __FP_FAST_FMA = FP_FAST_FMA;
  static constexpr int __FP_FAST_FMAF = FP_FAST_FMAF;
  static constexpr int __FP_FAST_FMAL = FP_FAST_FMAL;
  */

  static constexpr int __FP_ILOGB0 = FP_ILOGB0;
  static constexpr int __FP_ILOGBNAN = FP_ILOGBNAN;

  static constexpr int __MATH_ERRNO = MATH_ERRNO;
  static constexpr int __MATH_ERREXCEPT = MATH_ERREXCEPT;
  // May be a macro or not
  static constexpr int __math_errhandling = math_errhandling;

  template<typename T>
  constexpr int __fpclassify(T x) noexcept
  {
    return fpclassify(x);
  }

  template<typename T>
  constexpr int __isinf(T x) noexcept
  {
    return isinf(x);
  }

  template<typename T>
  constexpr int __isnan(T x) noexcept
  {
    return isnan(x);
  }

  template<typename T>
  constexpr int __isnormal(T x) noexcept
  {
    return isnormal(x);
  }

  template<typename T>
  constexpr int __signbit(T x) noexcept
  {
    return signbit(x);
  }

  template<typename T1, typename T2>
  constexpr int __isgreater(T1 x, T2 y) noexcept
  {
    return isgreater(x, y);
  }

  template<typename T1, typename T2>
  constexpr int __isgreaterequal(T1 x, T2 y) noexcept
  {
    return isgreaterequal(x, y);
  }

  template<typename T1, typename T2>
  constexpr int __isless(T1 x, T2 y) noexcept
  {
    return isless(x, y);
  }

  template<typename T1, typename T2>
  constexpr int __islessequal(T1 x, T2 y) noexcept
  {
    return islessequal(x, y);
  }

  template<typename T1, typename T2>
  constexpr int __islessgreater(T1 x, T2 y) noexcept
  {
    return islessgreater(x, y);
  }

  template<typename T1, typename T2>
  constexpr int __isunordered(T1 x, T2 y) noexcept
  {
    return isunordered(x, y);
  }
}

#undef HUGE_VAL
#undef HUGE_VALF
#undef HUGE_VALL

#undef INFINITY

#undef NAN

#undef FP_INFINITE
#undef FP_NAN
#undef FP_NORMAL
#undef FP_SUBNORMAL
#undef FP_ZERO

#undef FP_FAST_FMA
#undef FP_FAST_FMAF
#undef FP_FAST_FMAL

#undef FP_ILOGB0
#undef FP_ILOGBNAN

#undef MATH_ERRNO
#undef MATH_ERREXCEPT
#undef math_errhandling

#undef fpclassify
#undef isinf
#undef isnan
#undef isnormal
#undef signbit

#undef isgreater
#undef isgreaterequal
#undef isless
#undef islessequal
#undef islessgreater
#undef isunordered

export namespace ties::libc {
  using ::float_t;
  using ::double_t;

  inline constexpr double HUGE_VAL = impl::__HUGE_VAL;
  inline constexpr float HUGE_VALF = impl::__HUGE_VALF;
  inline constexpr long double HUGE_VALL = impl::__HUGE_VALL;

  inline constexpr float INFINITY = impl::__INFINITY;

  inline constexpr float NAN = impl::__NAN;

  inline constexpr int FP_INFINITE = impl::__FP_INFINITE;
  inline constexpr int FP_NAN = impl::__FP_NAN;
  inline constexpr int FP_NORMAL = impl::__FP_NORMAL;
  inline constexpr int FP_SUBNORMAL = impl::__FP_SUBNORMAL;
  inline constexpr int FP_ZERO = impl::__FP_ZERO;

  /*
  inline constexpr int FP_FAST_FMA = impl::__FP_FAST_FMA; 
  inline constexpr int FP_FAST_FMAF = impl::__FP_FAST_FMAF; 
  inline constexpr int FP_FAST_FMAL = impl::__FP_FAST_FMAL; 
  */

  inline constexpr int FP_ILOGB0 = impl::__FP_ILOGB0;
  inline constexpr int FP_ILOGBNAN = impl::__FP_ILOGBNAN;

  inline constexpr int MATH_ERRNO = impl::__MATH_ERRNO;
  inline constexpr int MATH_ERREXCEPT = impl::__MATH_ERREXCEPT;
  inline constexpr int math_errhandling = impl::__math_errhandling;

  template<typename T>
  [[nodiscard]] inline constexpr int fpclassify(T x) noexcept
  {
    return impl::__fpclassify(x);
  }

  template<typename T>
  [[nodiscard]] inline constexpr int isinf(T x) noexcept
  {
    return impl::__isinf(x);
  }

  template<typename T>
  [[nodiscard]] inline constexpr int isnan(T x) noexcept
  {
    return impl::__isnan(x);
  }

  template<typename T>
  [[nodiscard]] inline constexpr int isnormal(T x) noexcept
  {
    return impl::__isnormal(x);
  }

  template<typename T>
  [[nodiscard]] inline constexpr int signbit(T x) noexcept
  {
    return impl::__signbit(x);
  }

  using ::acos;
  using ::acosf;
  using ::acosl;

  using ::asin;
  using ::asinf;
  using ::asinl;

  using ::atan;
  using ::atanf;
  using ::atanl;

  using ::atan2;
  using ::atan2f;
  using ::atan2l;

  using ::cos;
  using ::cosf;
  using ::cosl;

  using ::sin;
  using ::sinf;
  using ::sinl;

  using ::tan;
  using ::tanf;
  using ::tanl;

  using ::acosh;
  using ::acoshf;
  using ::acosl;

  using ::asinh;
  using ::asinhf;
  using ::asinhl;

  using ::atanh;
  using ::atanhf;
  using ::atanhl;

  using ::cosh;
  using ::coshf;
  using ::coshl;

  using ::sinh;
  using ::sinhf;
  using ::sinhl;

  using ::tanh;
  using ::tanhf;
  using ::tanhl;

  using ::exp;
  using ::expf;
  using ::expl;

  using ::exp2;
  using ::exp2f;
  using ::exp2l;

  using ::expm1;
  using ::expm1f;
  using ::expm1l;

  using ::frexp;
  using ::frexpf;
  using ::frexpl;

  using ::ilogb;
  using ::ilogbf;
  using ::ilogbl;

  using ::ldexp;
  using ::ldexpf;
  using ::ldexpl;

  using ::log;
  using ::logf;
  using ::logl;

  using ::log10;
  using ::log10f;
  using ::log10l;

  using ::log1p;
  using ::log1pf;
  using ::log1pl;

  using ::log2;
  using ::log2f;
  using ::log2l;

  using ::logb;
  using ::logbf;
  using ::logbl;

  using ::modf;
  using ::modff;
  using ::modfl;

  using ::scalbn;
  using ::scalbnf;
  using ::scalbnl;
  using ::scalbln;
  using ::scalblnf;
  using ::scalblnl;

  using ::cbrt;
  using ::cbrtf;
  using ::cbrtl;

  using ::fabs;
  using ::fabsf;
  using ::fabsl;

  using ::hypot;
  using ::hypotf;
  using ::hypotl;

  using ::pow;
  using ::powf;
  using ::powl;

  using ::sqrt;
  using ::sqrtf;
  using ::sqrtl;

  using ::erf;
  using ::erff;
  using ::erfl;

  using ::erfc;
  using ::erfcf;
  using ::erfcl;

  using ::lgamma;
  using ::lgammaf;
  using ::lgammal;

  using ::tgamma;
  using ::tgammaf;
  using ::tgammal;

  using ::ceil;
  using ::ceilf;
  using ::ceill;

  using ::floor;
  using ::floorf;
  using ::floorl;

  using ::nearbyint;
  using ::nearbyintf;
  using ::nearbyintl;

  using ::rint;
  using ::rintf;
  using ::rintl;

  using ::lrint;
  using ::lrintf;
  using ::lrintl;
  using ::llrint;
  using ::llrintf;
  using ::llrintl;

  using ::round;
  using ::roundf;
  using ::roundl;

  using ::lround;
  using ::lroundf;
  using ::lroundl;
  using ::llround;
  using ::llroundf;
  using ::llroundl;

  using ::trunc;
  using ::truncf;
  using ::truncl;

  using ::fmod;
  using ::fmodf;
  using ::fmodl;

  using ::remainder;
  using ::remainderf;
  using ::remainderl;

  using ::remquo;
  using ::remquof;
  using ::remquol;

  using ::copysign;
  using ::copysignf;
  using ::copysignl;

  using ::nan;
  using ::nanf;
  using ::nanl;

  using ::nextafter;
  using ::nextafterf;
  using ::nextafterl;

  using ::nexttoward;
  using ::nexttowardf;
  using ::nexttowardl;

  using ::fdim;
  using ::fdimf;
  using ::fdiml;

  using ::fmax;
  using ::fmaxf;
  using ::fmaxl;

  using ::fmin;
  using ::fminf;
  using ::fminl;

  using ::fmal;

  template<typename T1, typename T2>
  [[nodiscard]] inline constexpr int isgreater(T1 x, T2 y) noexcept
  {
    return impl::__isgreater(x, y);
  }

  template<typename T1, typename T2>
  [[nodiscard]] inline constexpr int isgreaterequal(T1 x, T2 y) noexcept
  {
    return impl::__isgreaterequal(x, y);
  }

  template<typename T1, typename T2>
  [[nodiscard]] inline constexpr int isless(T1 x, T2 y) noexcept
  {
    return impl::__isless(x, y);
  }

  template<typename T1, typename T2>
  [[nodiscard]] inline constexpr int islessequal(T1 x, T2 y) noexcept
  {
    return impl::__islessequal(x, y);
  }

  template<typename T1, typename T2>
  [[nodiscard]] inline constexpr int islessgreater(T1 x, T2 y) noexcept
  {
    return impl::__islessgreater(x, y);
  }

  template<typename T1, typename T2>
  [[nodiscard]] inline constexpr int isunordered(T1 x, T2 y) noexcept
  {
    return impl::__isunordered(x, y);
  }
}

